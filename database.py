# database.py
import sqlite3
import datetime
from pathlib import Path
from typing import Tuple

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
DB_FILE = Path("storage/users.db")
DAILY_LIMIT = 1 

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        DB_FILE.parent.mkdir(parents=True, exist_ok=True)
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                usage_count INTEGER DEFAULT 0,
                last_usage_date TEXT NOT NULL,
                first_seen_date TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {DB_FILE}")
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

# --- ‚úÖ –ù–û–í–ê–Ø, –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

def get_or_create_user(user_id: int, username: str, first_name: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ initData.
    """
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        today_str = datetime.date.today().isoformat()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        user_exists = cursor.fetchone()

        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            cursor.execute(
                "INSERT INTO users (user_id, username, first_name, usage_count, last_usage_date, first_seen_date) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, username, first_name, 0, '1970-01-01', today_str)
            )
            conn.commit()
            print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({first_name}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –≤ get_or_create_user –¥–ª—è user_id {user_id}: {e}")
    finally:
        if conn:
            conn.close()


def can_user_generate(user_id: int) -> Tuple[bool, str, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ë–û–õ–¨–®–ï –ù–ï –°–û–ó–î–ê–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        today_str = datetime.date.today().isoformat()

        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—Ä–µ—â–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if user_data is None:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", 0

        last_date_str = user_data['last_usage_date']
        current_usage = user_data['usage_count']

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if last_date_str != today_str:
            current_usage = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if current_usage < DAILY_LIMIT:
            new_count = current_usage + 1
            cursor.execute(
                "UPDATE users SET usage_count = ?, last_usage_date = ? WHERE user_id = ?",
                (new_count, today_str, user_id)
            )
            conn.commit()
            remaining = DAILY_LIMIT - new_count
            return True, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining}", remaining
        else:
            return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({DAILY_LIMIT}) –∏—Å—á–µ—Ä–ø–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!", 0

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –≤ can_user_generate –¥–ª—è user_id {user_id}: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞.", 0
    finally:
        if conn:
            conn.close()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_total_users_count() -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ."""
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(user_id) FROM users")
        count = cursor.fetchone()[0]
        return count
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0
    finally:
        if conn:
            conn.close()