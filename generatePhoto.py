# main.py
import os
import httpx
import base64
import traceback
import random
import uuid
import json
import time
from datetime import datetime
from typing import List, Dict, Optional
import asyncio
import hmac
import hashlib
from urllib.parse import unquote

from PIL import Image
import io

from fastapi import FastAPI, HTTPException, UploadFile, File, status, BackgroundTasks, Header, Depends, Security
from fastapi.security import APIKeyHeader
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import redis

from pydantic import BaseModel
from database import init_db, get_or_create_user, can_user_generate, get_total_users_count

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PIAPI_KEY = os.getenv("PIAPI_API_KEY")
IMAGE_DIR = "/app/batyr-images"
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
MAX_POLLING_TIME = 120
POLLING_INTERVAL = 2

if not PIAPI_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PIAPI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ---
try:
    redis_pool = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
    redis_client = redis.Redis(connection_pool=redis_pool)
    redis_client.ping()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis –ø–æ –∞–¥—Ä–µ—Å—É: {REDIS_HOST}:{REDIS_PORT}")
except redis.exceptions.ConnectionError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    redis_client = None

# --- –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ ---
batyr_images_cache: List[Dict[str, str]] = []

def load_batyr_images_to_cache():
    print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤...")
    try:
        if not os.path.exists(IMAGE_DIR):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {IMAGE_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        for filename in os.listdir(IMAGE_DIR):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                image_path = os.path.join(IMAGE_DIR, filename)
                try:
                    with open(image_path, "rb") as image_file:
                        encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                        mime_type = f"image/{filename.split('.')[-1].lower().replace('jpg', 'jpeg')}"
                        data_uri = f"data:{mime_type};base64,{encoded_string}"
                        batyr_images_cache.append({"name": filename, "data_uri": data_uri})
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")
        if batyr_images_cache:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(batyr_images_cache)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        else:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI ---
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
fastapi_kwargs = {"title": "Batyr AI API", "description": "API –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –±–∞—Ç—ã—Ä–æ–≤."}
if ENVIRONMENT == "production":
    fastapi_kwargs.update({"docs_url": None, "redoc_url": None, "openapi_url": None})
    print("Main: 'production' mode. API docs disabled.")
else:
    print("Main: 'development' mode. API docs available.")
app = FastAPI(**fastapi_kwargs)


@app.on_event("startup")
def on_startup():
    init_db()
    load_batyr_images_to_cache()
    if not redis_client: raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis.")

# --- Middleware –¥–ª—è CORS ---
origins = ["http://localhost:3000", "https://batyrai.com", "https://www.batyrai.com", "https://batyr-ai.vercel.app", "https://batyr-ai-madis-projects-f57aa02c.vercel.app"]
app.add_middleware(CORSMiddleware, allow_origins=origins, allow_credentials=True, allow_methods=["*"], allow_headers=["*"])


# --- ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram initData ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –°–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ.")

telegram_init_data_header = APIKeyHeader(name="X-Telegram-Init-Data", auto_error=False)

async def get_validated_telegram_data(init_data: str = Security(telegram_init_data_header)):
    if not init_data:
        raise HTTPException(status_code=401, detail="X-Telegram-Init-Data header is missing")
    try:
        unquoted_init_data = unquote(init_data)
        data_check_string, hash_from_telegram = [], ''
        for item in sorted(unquoted_init_data.split('&')):
            key, value = item.split('=', 1)
            if key == 'hash':
                hash_from_telegram = value
            else:
                data_check_string.append(f"{key}={value}")
        data_check_string = "\n".join(data_check_string)
        secret_key = hmac.new("WebAppData".encode(), BOT_TOKEN.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

        if calculated_hash != hash_from_telegram:
            raise HTTPException(status_code=403, detail="Invalid data signature")

        user_data_dict = dict(kv.split('=') for kv in unquoted_init_data.split('&'))
        user_data = json.loads(user_data_dict.get('user', '{}'))
        user_id = user_data.get('id')
        if not user_id:
            raise ValueError("User ID not found in validated data")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        get_or_create_user(
            user_id=user_id,
            username=user_data.get('username', 'unknown'),
            first_name=user_data.get('first_name', 'unknown')
        )
        
        return user_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram initData: {e}")
        raise HTTPException(status_code=403, detail="Could not validate Telegram credentials.")


# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö ---
class PhotoSendRequest(BaseModel):
    imageUrl: str


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_random_batyr_image_uri():
    if not batyr_images_cache:
        raise ValueError("–ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ –ø—É—Å—Ç.")
    return random.choice(batyr_images_cache)['data_uri']

def update_job_status(job_id: str, status_data: dict):
    try:
        redis_client.set(job_id, json.dumps(status_data), ex=3600)
        print(f"üìù [Job: {job_id}] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_data.get('status', 'N/A')}")
    except Exception as e:
        print(f"‚ùå [Job: {job_id}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Redis: {e}")

def resize_image_to_base64(image_bytes: bytes, max_size: int = 1024) -> str:
    try:
        img = Image.open(io.BytesIO(image_bytes))
        if img.mode in ("RGBA", "P"): img = img.convert("RGB")
        img.thumbnail((max_size, max_size))
        buffer = io.BytesIO()
        img.save(buffer, format="JPEG", quality=85)
        encoded_string = base64.b64encode(buffer.getvalue()).decode('utf-8')
        return f"data:image/jpeg;base64,{encoded_string}"
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.") from e

async def send_telegram_message(user_id: int, text: str):
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = { "chat_id": user_id, "text": text, "parse_mode": "HTML" }
    try:
        async with httpx.AsyncClient() as client:
            await client.post(url, json=payload)
        print(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def run_face_swap_in_background(job_id: str, user_photo_bytes: bytes, user_id: int):
    try:
        update_job_status(job_id, {"status": "processing", "message": "‚è≥ –£–º–µ–Ω—å—à–∞—é –≤–∞—à–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥–±–∏—Ä–∞—é –æ–±—Ä–∞–∑..."})
        user_photo_data_uri = resize_image_to_base64(user_photo_bytes)
        target_image_uri = get_random_batyr_image_uri()
        headers = {"x-api-key": PIAPI_KEY, "Content-Type": "application/json"}
        payload = { "model": "Qubico/image-toolkit", "task_type": "face-swap", "input": {"target_image": target_image_uri, "swap_image": user_photo_data_uri} }
        update_job_status(job_id, {"status": "sending", "message": "üõ∞Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å..."})
        with httpx.Client(timeout=30.0) as client:
            response = client.post("https://api.piapi.ai/api/v1/task", headers=headers, json=payload)
            response.raise_for_status()
            task_response = response.json()
        piapi_task_id = task_response.get("data", {}).get("task_id")
        if not piapi_task_id:
            raise ValueError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω task_id –æ—Ç PiAPI: {task_response}")
        start_time = time.monotonic()
        while time.monotonic() - start_time < MAX_POLLING_TIME:
            time.sleep(POLLING_INTERVAL)
            with httpx.Client(timeout=15.0) as client:
                res = client.get(f"https://api.piapi.ai/api/v1/task/{piapi_task_id}", headers=headers)
            if res.status_code == 200:
                piapi_data = res.json().get("data", {})
                piapi_status = piapi_data.get("status", "Unknown").title()
                if piapi_status == "Completed":
                    result_url = piapi_data.get("output", {}).get("image_url")
                    update_job_status(job_id, {"status": "completed", "result_url": result_url, "message": "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"})
                    asyncio.run(send_telegram_message(user_id, "<b>–í–∞—à –ø–æ—Ä—Ç—Ä–µ—Ç –±–∞—Ç—ã—Ä–∞ –≥–æ—Ç–æ–≤!</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ."))
                    return
                elif piapi_status == "Failed":
                    error_details = piapi_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ PiAPI").lower()
                    user_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ." if "face not found" in error_details else f"PiAPI –æ—à–∏–±–∫–∞: {piapi_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    update_job_status(job_id, {"status": "failed", "error": user_message})
                    return
                elif piapi_status in ["Processing", "Pending", "Staged"]:
                    update_job_status(job_id, {"status": "processing", "message": f"üë®‚Äçüé® –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∏—Å—É–µ—Ç... (—Å—Ç–∞—Ç—É—Å: {piapi_status})"})
                else:
                    update_job_status(job_id, {"status": "failed", "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å PiAPI: {piapi_status}"})
                    return
        update_job_status(job_id, {"status": "timeout", "error": f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MAX_POLLING_TIME}—Å)"})
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {str(e)}"
        traceback.print_exc()
        update_job_status(job_id, {"status": "failed", "error": error_msg})

# --- –ì–ª–∞–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –Ω–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π ---
@app.post("/api/start-face-swap", status_code=status.HTTP_202_ACCEPTED)
async def start_face_swap_task(
    background_tasks: BackgroundTasks,
    user_photo: UploadFile = File(...),
    validated_user: dict = Depends(get_validated_telegram_data)
):
    user_id = validated_user.get('id')
    if not user_id:
        raise HTTPException(status_code=403, detail="Invalid user data from Telegram.")

    can_generate, message, remaining_attempts = can_user_generate(user_id=user_id)
    if not can_generate:
        raise HTTPException(status_code=status.HTTP_429_TOO_MANY_REQUESTS, detail=message)

    job_id = str(uuid.uuid4())
    if not user_photo.content_type.startswith("image/"):
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
    
    user_photo_bytes = await user_photo.read()
    update_job_status(job_id, {"status": "accepted", "job_id": job_id, "message": "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."})
    background_tasks.add_task(run_face_swap_in_background, job_id, user_photo_bytes, user_id)
    
    print(f"üëç [Job: {job_id}] –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({validated_user.get('first_name', '')}).")
    return { "job_id": job_id, "status": "accepted", "message": "–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.", "remaining_attempts": remaining_attempts }


@app.get("/api/task-status/{job_id}", dependencies=[Depends(get_validated_telegram_data)])
async def get_task_status(job_id: str):
    task_data_str = redis_client.get(job_id)
    if not task_data_str:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return json.loads(task_data_str)


@app.post("/api/send-photo-to-chat")
async def send_photo_to_chat(
    request: PhotoSendRequest,
    validated_user: dict = Depends(get_validated_telegram_data)
):
    user_id = validated_user.get('id')
    if not user_id:
        raise HTTPException(status_code=403, detail="Invalid user data.")

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise HTTPException(status_code=500, detail="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    
    url = f"https://api.telegram.org/bot{token}/sendPhoto"
    payload = { "chat_id": user_id, "photo": request.imageUrl, "caption": "–í–∞—à –ø–æ—Ä—Ç—Ä–µ—Ç –ë–∞—Ç—ã—Ä–∞ –≥–æ—Ç–æ–≤! ‚ú®\n\n–°–æ–∑–¥–∞–Ω–æ –≤ @BatyrAI_bot" }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, timeout=30.0)
            response.raise_for_status()
        return {"status": "ok", "message": "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —á–∞—Ç."}
    except Exception as e:
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")


@app.get("/api/download-image", dependencies=[Depends(get_validated_telegram_data)])
async def download_image_proxy(url: str):
    if not url:
        raise HTTPException(status_code=400, detail="URL –Ω–µ —É–∫–∞–∑–∞–Ω.")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, follow_redirects=True, timeout=30.0)
            response.raise_for_status()
            content_type = response.headers.get('content-type', 'application/octet-stream')
            return StreamingResponse(response.iter_bytes(), media_type=content_type)
    except Exception as e:
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")


# --- –û—Ç–∫—Ä—ã—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---
@app.get("/api/stats")
async def get_app_stats():
    total_users = get_total_users_count()
    return { "total_unique_users": total_users, "timestamp": datetime.now().isoformat() }

@app.get("/api/health")
async def health_check():
    redis_status = "disconnected"
    try:
        if redis_client and redis_client.ping():
            redis_status = "connected"
    except Exception:
        pass
    return { "status": "healthy" if redis_status == "connected" else "unhealthy", "redis": redis_status, "batyr_images_cached": len(batyr_images_cache), "timestamp": datetime.now().isoformat() }