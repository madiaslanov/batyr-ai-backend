import os
import httpx
import base64
import traceback
import random
from fastapi import FastAPI, HTTPException, UploadFile, File, status
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PIAPI_KEY = os.getenv("PIAPI_API_KEY")

if not PIAPI_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PIAPI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

IMAGE_DIR = "/app/batyr-images"

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI ---
app = FastAPI(
    title="Batyr AI API",
    description="API –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –±–∞—Ç—ã—Ä–æ–≤."
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def get_random_batyr_image_base64():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ IMAGE_DIR, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ,
    —á–∏—Ç–∞–µ—Ç –µ–≥–æ –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É Base64.
    """
    try:
        available_images = [f for f in os.listdir(IMAGE_DIR) if os.path.isfile(os.path.join(IMAGE_DIR, f))]
        
        if not available_images:
            print(f"üî• –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {IMAGE_DIR}")
            raise Exception("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
        random_image_name = random.choice(available_images)
        image_path = os.path.join(IMAGE_DIR, random_image_name)
        
        print(f"üñºÔ∏è  –í—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")

        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
            
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        traceback.print_exc()
        raise

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

@app.post("/api/piapi/face-swap", summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞")
async def create_face_swap_task(user_photo: UploadFile = File(..., description="–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞")):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞—Ç—ã—Ä–∞
    –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–º–µ–Ω—É –ª–∏—Ü–∞ –≤ PiAPI.
    """
    try:
        print("‚è≥ –ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_image_bytes = await user_photo.read()
        user_image_base64 = base64.b64encode(user_image_bytes).decode('utf-8')

        print("üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—ã—Ä–∞...")
        batyr_image_base64 = get_random_batyr_image_base64()
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞—Ç—ã—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ.")

        headers = {
            "x-api-key": PIAPI_KEY,
            "Content-Type": "application/json"
        }

        payload = {
            "model": "Qubico/image-toolkit",
            "task_type": "multi-face-swap",
            "input": {
                "swap_image": user_image_base64,  # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ–º –ª–∏—Ü–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ)
                "target_image": batyr_image_base64, # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –ª–∏—Ü–æ (–±–∞—Ç—ã—Ä)
                "swap_faces_index": "0", # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–∞ user_photo –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ
                "target_faces_index": "0" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–∞ batyr_photo –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ
            }
        }

        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–º–µ–Ω—É –ª–∏—Ü–∞ –≤ PiAPI...")
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post("https://api.piapi.ai/api/v1/task", headers=headers, json=payload)

        print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç PiAPI: {response.text}")
        response.raise_for_status()

        return response.json()

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –æ—Ç PiAPI: {e.response.status_code} - {e.response.text}")
        raise HTTPException(
            status_code=e.response.status_code,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e.response.text}"
        )
    except httpx.RequestError as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ PiAPI (—Å–µ—Ç–µ–≤–∞—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç): {e}")
        raise HTTPException(
            status_code=status.HTTP_504_GATEWAY_TIMEOUT, # –ò–ª–∏ 503 Service Unavailable
            detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º: {str(e)}"
        )
    except Exception as e:
        print(f"üî• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ face-swap: {str(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.get("/api/piapi/task/{task_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏")
async def get_task_result(task_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ –µ–µ ID –≤ PiAPI.
    """
    headers = { "x-api-key": PIAPI_KEY }
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"https://api.piapi.ai/api/v1/task/{task_id}", headers=headers)
        
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –æ—Ç PiAPI –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e.response.status_code} - {e.response.text}")
        if e.response.status_code == status.HTTP_404_NOT_FOUND:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
        raise HTTPException(
            status_code=e.response.status_code,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e.response.text}"
        )
    except httpx.RequestError as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ PiAPI (—Å–µ—Ç–µ–≤–∞—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_504_GATEWAY_TIMEOUT,
            detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )
    except Exception as e:
        print(f"üî• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ get-task-result: {str(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")