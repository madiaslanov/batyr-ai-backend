import os
import httpx
import base64
import traceback
import random
import uuid
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict

from fastapi import FastAPI, HTTPException, UploadFile, File, status, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import redis

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PIAPI_KEY = os.getenv("PIAPI_API_KEY")
IMAGE_DIR = "/app/batyr-images" # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
MAX_POLLING_TIME = 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (2 –º–∏–Ω—É—Ç—ã)
POLLING_INTERVAL = 2    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
MAX_RETRIES = 3         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

if not PIAPI_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PIAPI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ---
try:
    redis_pool = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
    redis_client = redis.Redis(connection_pool=redis_pool)
    redis_client.ping()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis –ø–æ –∞–¥—Ä–µ—Å—É: {REDIS_HOST}:{REDIS_PORT}")
except redis.exceptions.ConnectionError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    redis_client = None # –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ None, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–ª–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# --- –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏ ---
# –£–õ–£–ß–®–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –∞ –Ω–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
batyr_images_cache: List[Dict[str, str]] = []

def load_batyr_images_to_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—ã—Ä–æ–≤ –≤ –∫—ç—à."""
    print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤...")
    try:
        if not os.path.exists(IMAGE_DIR):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {IMAGE_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—ã—Ä–æ–≤ –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return
            
        for filename in os.listdir(IMAGE_DIR):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                image_path = os.path.join(IMAGE_DIR, filename)
                try:
                    with open(image_path, "rb") as image_file:
                        encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
                        mime_type = f"image/{filename.split('.')[-1].lower()}"
                        if mime_type == "image/jpg": mime_type = "image/jpeg"

                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π Data URI
                        data_uri = f"data:{mime_type};base64,{encoded_string}"
                        
                        batyr_images_cache.append({"name": filename, "data_uri": data_uri})
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")
        
        if batyr_images_cache:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(batyr_images_cache)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤.")
        else:
            print("‚ùå –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—ã—Ä–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.")

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        traceback.print_exc()

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI ---
app = FastAPI(
    title="Batyr AI API",
    description="API –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –±–∞—Ç—ã—Ä–æ–≤."
)

@app.on_event("startup")
def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    load_batyr_images_to_cache()
    if not redis_client:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")


app.add_middleware(
    CORSMiddleware,
    # –£–õ–£–ß–®–ï–ù–ò–ï: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏ "*" –Ω–∞ –¥–æ–º–µ–Ω —Ç–≤–æ–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    allow_origins=["*"], # –ù–∞–ø—Ä–∏–º–µ—Ä: ["https://your-frontend.com", "http://localhost:3000"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_random_batyr_image_uri():
    """–£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞."""
    if not batyr_images_cache:
        raise ValueError("–ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    return random.choice(batyr_images_cache)['data_uri']

def update_job_status(job_id: str, status_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redis."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º json.dumps, —Ç–∞–∫ –∫–∞–∫ Redis —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫–∏
        redis_client.set(job_id, json.dumps(status_data), ex=3600) 
        print(f"üìù [Job: {job_id}] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_data.get('status', 'N/A')}")
    except Exception as e:
        print(f"‚ùå [Job: {job_id}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Redis: {e}")

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_photo_data_uri
def run_face_swap_in_background(job_id: str, user_photo_data_uri: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ face-swap."""
    try:
        # ... (–∫–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        update_job_status(job_id, {"status": "preparing", "message": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"})
        target_image_uri = get_random_batyr_image_uri()
        headers = {"x-api-key": PIAPI_KEY, "Content-Type": "application/json"}
        payload = {
            "model": "Qubico/image-toolkit",
            "task_type": "face-swap",
            "input": {
                "target_image": target_image_uri,
                "swap_image": user_photo_data_uri,
            }
        }
        
        # 2. –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ PiAPI
        update_job_status(job_id, {"status": "sending", "message": "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ PiAPI"})
        print(f"üöÄ [Job: {job_id}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ PiAPI...")
        with httpx.Client(timeout=30.0) as client:
            response = client.post("https://api.piapi.ai/api/v1/task", headers=headers, json=payload)
            response.raise_for_status()
            task_response = response.json()
        print(f"üìã [Job: {job_id}] –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç PiAPI: {task_response}")
        piapi_task_id = task_response.get("data", {}).get("task_id")
        if not piapi_task_id:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id –æ—Ç PiAPI. –û—Ç–≤–µ—Ç: {task_response}")

        # 3. –û–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"‚è≥ [Job: {job_id}] –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ PiAPI –¥–ª—è task_id: {piapi_task_id}")
        start_time = time.monotonic()
        
        while time.monotonic() - start_time < MAX_POLLING_TIME:
            try:
                with httpx.Client(timeout=15.0) as client:
                    res = client.get(f"https://api.piapi.ai/api/v1/task/{piapi_task_id}", headers=headers)
                
                if res.status_code == 200:
                    piapi_data = res.json().get("data", {})
                    
                    # ---> –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ <---
                    # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É (Title Case), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–æ–º.
                    piapi_status = piapi_data.get("status", "Unknown").title() 
                    
                    print(f"üìä [Job: {job_id}] –°—Ç–∞—Ç—É—Å PiAPI: {piapi_status} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")

                    if piapi_status == "Completed":
                        result_url = piapi_data.get("output", {}).get("image_url")
                        if not result_url:
                            raise ValueError("–°—Ç–∞—Ç—É—Å 'Completed', –Ω–æ URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ PiAPI.")
                        update_job_status(job_id, {"status": "completed", "result_url": result_url})
                        print(f"‚úÖ [Job: {job_id}] –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                        return
                        
                    elif piapi_status == "Failed":
                        error_details = piapi_data.get("error", {"message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ PiAPI"})
                        update_job_status(job_id, {"status": "failed", "error": f"PiAPI –æ—à–∏–±–∫–∞: {error_details}"})
                        print(f"‚ùå [Job: {job_id}] PiAPI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_details}")
                        return
                    
                    # –¢–µ–ø–µ—Ä—å 'processing' —Å—Ç–∞–Ω–µ—Ç 'Processing' –∏ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                    elif piapi_status in ["Processing", "Pending", "Staged"]:
                        # –í—Å–µ —Ö–æ—Ä–æ—à–æ, –∂–¥–µ–º –¥–∞–ª—å—à–µ
                        update_job_status(job_id, {"status": "processing", "piapi_status": piapi_status})
                        pass
                    else:
                        print(f"‚ö†Ô∏è [Job: {job_id}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç PiAPI: {piapi_status}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")
                        update_job_status(job_id, {"status": "failed", "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å PiAPI: {piapi_status}"})
                        return

                else:
                    print(f"‚ö†Ô∏è [Job: {job_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ PiAPI: HTTP {res.status_code}")
            
            except httpx.RequestError as e:
                print(f"‚è∞ [Job: {job_id}] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ PiAPI: {e}")
            
            time.sleep(POLLING_INTERVAL)

        timeout_msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MAX_POLLING_TIME}—Å). API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–æ –≤–æ–≤—Ä–µ–º—è."
        print(f"‚è∞ [Job: {job_id}] {timeout_msg}")
        update_job_status(job_id, {"status": "timeout", "error": timeout_msg})

    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {str(e)}"
        print(f"üî• [Job: {job_id}] {error_msg}")
        traceback.print_exc()
        update_job_status(job_id, {"status": "failed", "error": error_msg})


@app.post("/api/start-face-swap", status_code=status.HTTP_202_ACCEPTED)
async def start_face_swap_task(
    background_tasks: BackgroundTasks, 
    user_photo: UploadFile = File(...)
):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ."""
    job_id = str(uuid.uuid4())
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not user_photo.content_type.startswith("image/"):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpeg, png, webp)."
            )

        user_photo_bytes = await user_photo.read()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π Data URI –¥–ª—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_photo_base64 = base64.b64encode(user_photo_bytes).decode('utf-8')
        user_photo_data_uri = f"data:{user_photo.content_type};base64,{user_photo_base64}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ Redis
        initial_status = {"status": "accepted", "job_id": job_id}
        update_job_status(job_id, initial_status)

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π URI –≤ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        background_tasks.add_task(run_face_swap_in_background, job_id, user_photo_data_uri)
        
        print(f"üëç [Job: {job_id}] –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.")
        return {"job_id": job_id, "status": "accepted", "message": "–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ job_id."}
        
    except Exception as e:
        print(f"‚ùå [Job: {job_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º job_id –≤ –æ—Ç–≤–µ—Ç–µ –æ–± –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏: {str(e)}"
        )


@app.get("/api/task-status/{job_id}")
async def get_task_status(job_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ Redis."""
    try:
        task_data_str = redis_client.get(job_id)
        if not task_data_str:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND, 
                detail="–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ–µ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫."
            )
        
        return json.loads(task_data_str)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {job_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
        )

# –î—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (health, stats –∏ —Ç.–¥.) –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
# –û–Ω–∏ —É —Ç–µ–±—è –Ω–∞–ø–∏—Å–∞–Ω—ã —Ö–æ—Ä–æ—à–æ.
# ...

@app.get("/api/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
async def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –∏ Redis"""
    redis_status = "disconnected"
    try:
        if redis_client and redis_client.ping():
            redis_status = "connected"
    except Exception:
        pass
    
    return {
        "status": "healthy" if redis_status == "connected" else "unhealthy",
        "redis": redis_status,
        "batyr_images_cached": len(batyr_images_cache),
        "timestamp": datetime.now().isoformat()
    }