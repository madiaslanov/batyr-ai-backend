import os
import httpx
import base64
import traceback
import random
import uuid
import json
import time
from datetime import datetime
from typing import List, Dict, Optional

# <<< –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –Ω–∞—à–µ–π –ë–î
from fastapi import FastAPI, HTTPException, UploadFile, File, status, BackgroundTasks, Header
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import redis

# <<< –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ database.py
from database import init_db, can_user_generate, get_total_users_count

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PIAPI_KEY = os.getenv("PIAPI_API_KEY")
IMAGE_DIR = "/app/batyr-images"
REDIS_HOST = os.getenv("REDIS_HOST", "redis") # <<< –ò–ó–ú–ï–ù–ï–ù–û: –î–ª—è Docker –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
MAX_POLLING_TIME = 120
POLLING_INTERVAL = 2

if not PIAPI_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PIAPI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis ---
# (–í–∞—à –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try:
    redis_pool = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
    redis_client = redis.Redis(connection_pool=redis_pool)
    redis_client.ping()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis –ø–æ –∞–¥—Ä–µ—Å—É: {REDIS_HOST}:{REDIS_PORT}")
except redis.exceptions.ConnectionError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    redis_client = None

# --- –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏ ---
# (–í–∞—à –∫–æ–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
batyr_images_cache: List[Dict[str, str]] = []

def load_batyr_images_to_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—ã—Ä–æ–≤ –≤ –∫—ç—à."""
    print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤...")
    # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        if not os.path.exists(IMAGE_DIR):
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {IMAGE_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        for filename in os.listdir(IMAGE_DIR):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                image_path = os.path.join(IMAGE_DIR, filename)
                try:
                    with open(image_path, "rb") as image_file:
                        encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                        mime_type = f"image/{filename.split('.')[-1].lower().replace('jpg', 'jpeg')}"
                        data_uri = f"data:{mime_type};base64,{encoded_string}"
                        batyr_images_cache.append({"name": filename, "data_uri": data_uri})
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")
        if batyr_images_cache:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(batyr_images_cache)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        else:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI ---
app = FastAPI(
    title="Batyr AI API",
    description="API –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –±–∞—Ç—ã—Ä–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–∏–º–∏—Ç–æ–≤."
)

@app.on_event("startup")
def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # <<< –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    init_db()
    
    load_batyr_images_to_cache()
    if not redis_client:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")

# --- Middleware –¥–ª—è CORS ---
origins = [
    "https://batyrai.com",     # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    "http://localhost",         # –û—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    "http://localhost:3000",    # –ò —ç—Ç–æ—Ç —Ç–æ–∂–µ
    "http://localhost:8000",
    "http://localhost:80",
    "https://batyr-ai.vercel.app"
]
# (–í–∞—à –∫–æ–¥ middleware –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,      # <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ---
# (–í—Å–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_random_batyr_image_uri, update_job_status, run_face_swap_in_background –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_random_batyr_image_uri():
    # ...
    if not batyr_images_cache:
        raise ValueError("–ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞—Ç—ã—Ä–æ–≤ –ø—É—Å—Ç.")
    return random.choice(batyr_images_cache)['data_uri']

def update_job_status(job_id: str, status_data: dict):
    # ...
    try:
        redis_client.set(job_id, json.dumps(status_data), ex=3600) 
        print(f"üìù [Job: {job_id}] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_data.get('status', 'N/A')}")
    except Exception as e:
        print(f"‚ùå [Job: {job_id}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Redis: {e}")

def run_face_swap_in_background(job_id: str, user_photo_data_uri: str):
    # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # –≠—Ç–æ—Ç –∫–æ–¥ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞
    try:
        update_job_status(job_id, {"status": "preparing", "message": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"})
        target_image_uri = get_random_batyr_image_uri()
        headers = {"x-api-key": PIAPI_KEY, "Content-Type": "application/json"}
        payload = {"model": "Qubico/image-toolkit", "task_type": "face-swap", "input": {"target_image": target_image_uri, "swap_image": user_photo_data_uri,}}
        
        update_job_status(job_id, {"status": "sending", "message": "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ PiAPI"})
        with httpx.Client(timeout=30.0) as client:
            response = client.post("https://api.piapi.ai/api/v1/task", headers=headers, json=payload)
            response.raise_for_status()
            task_response = response.json()
        piapi_task_id = task_response.get("data", {}).get("task_id")
        if not piapi_task_id:
            raise ValueError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω task_id –æ—Ç PiAPI: {task_response}")

        start_time = time.monotonic()
        while time.monotonic() - start_time < MAX_POLLING_TIME:
            time.sleep(POLLING_INTERVAL)
            with httpx.Client(timeout=15.0) as client:
                res = client.get(f"https://api.piapi.ai/api/v1/task/{piapi_task_id}", headers=headers)
            if res.status_code == 200:
                piapi_data = res.json().get("data", {})
                piapi_status = piapi_data.get("status", "Unknown").title()
                if piapi_status == "Completed":
                    result_url = piapi_data.get("output", {}).get("image_url")
                    update_job_status(job_id, {"status": "completed", "result_url": result_url})
                    return
                elif piapi_status == "Failed":
                    error_details = piapi_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ PiAPI")
                    update_job_status(job_id, {"status": "failed", "error": f"PiAPI –æ—à–∏–±–∫–∞: {error_details}"})
                    return
                elif piapi_status in ["Processing", "Pending", "Staged"]:
                    update_job_status(job_id, {"status": "processing", "piapi_status": piapi_status})
                else:
                    update_job_status(job_id, {"status": "failed", "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å PiAPI: {piapi_status}"})
                    return
        update_job_status(job_id, {"status": "timeout", "error": f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({MAX_POLLING_TIME}—Å)"})
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {str(e)}"
        traceback.print_exc()
        update_job_status(job_id, {"status": "failed", "error": error_msg})


# <<< –ì–õ–ê–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ >>>
@app.post("/api/start-face-swap", status_code=status.HTTP_202_ACCEPTED)
async def start_face_swap_task(
    background_tasks: BackgroundTasks, 
    user_photo: UploadFile = File(...),
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    x_telegram_user_id: int = Header(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"),
    x_telegram_username: Optional[str] = Header(None, description="Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"),
    x_telegram_first_name: Optional[str] = Header(None, description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ.
    """
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    can_generate, message, remaining_attempts = await can_user_generate(
        user_id=x_telegram_user_id,
        username=x_telegram_username or "N/A",
        first_name=x_telegram_first_name or "N/A"
    )

    if not can_generate:
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 429 Too Many Requests
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail=message
        )

    # 2. –ï—Å–ª–∏ –ª–∏–º–∏—Ç –≤ –ø–æ—Ä—è–¥–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    job_id = str(uuid.uuid4())
    try:
        if not user_photo.content_type.startswith("image/"):
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")

        user_photo_bytes = await user_photo.read()
        user_photo_base64 = base64.b64encode(user_photo_bytes).decode('utf-8')
        user_photo_data_uri = f"data:{user_photo.content_type};base64,{user_photo_base64}"
        
        initial_status = {"status": "accepted", "job_id": job_id}
        update_job_status(job_id, initial_status)

        background_tasks.add_task(run_face_swap_in_background, job_id, user_photo_data_uri)
        
        print(f"üëç [Job: {job_id}] –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {x_telegram_user_id}.")
        return {
            "job_id": job_id, 
            "status": "accepted", 
            "message": "–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
            "remaining_attempts": remaining_attempts
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏: {str(e)}")

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ---

@app.get("/api/task-status/{job_id}")
async def get_task_status(job_id: str):
    # (–í–∞—à –∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        task_data_str = redis_client.get(job_id)
        if not task_data_str:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return json.loads(task_data_str)
    except Exception as e:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

# <<< –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ >>>
@app.get("/api/stats")
async def get_app_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."""
    total_users = await get_total_users_count()
    return {
        "total_unique_users": total_users,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/health")
async def health_check():
    # (–í–∞—à –∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    redis_status = "disconnected"
    try:
        if redis_client and redis_client.ping():
            redis_status = "connected"
    except Exception:
        pass
    
    return {
        "status": "healthy" if redis_status == "connected" else "unhealthy",
        "redis": redis_status,
        "batyr_images_cached": len(batyr_images_cache),
        "timestamp": datetime.now().isoformat()
    }